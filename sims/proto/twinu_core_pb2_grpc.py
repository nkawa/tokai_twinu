# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import twinu_core_pb2 as twinu__core__pb2


class TwinuStub(object):
    """all Twinu module need to have this listener
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetInfo = channel.unary_unary(
                '/twinu.Twinu/GetInfo',
                request_serializer=twinu__core__pb2.OK.SerializeToString,
                response_deserializer=twinu__core__pb2.TwNodeInfo.FromString,
                )
        self.QueryNode = channel.unary_unary(
                '/twinu.Twinu/QueryNode',
                request_serializer=twinu__core__pb2.TwNodeQuery.SerializeToString,
                response_deserializer=twinu__core__pb2.TwNodeInfo.FromString,
                )
        self.Step = channel.unary_unary(
                '/twinu.Twinu/Step',
                request_serializer=twinu__core__pb2.StepInfo.SerializeToString,
                response_deserializer=twinu__core__pb2.OK.FromString,
                )


class TwinuServicer(object):
    """all Twinu module need to have this listener
    """

    def GetInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Step(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TwinuServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInfo,
                    request_deserializer=twinu__core__pb2.OK.FromString,
                    response_serializer=twinu__core__pb2.TwNodeInfo.SerializeToString,
            ),
            'QueryNode': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryNode,
                    request_deserializer=twinu__core__pb2.TwNodeQuery.FromString,
                    response_serializer=twinu__core__pb2.TwNodeInfo.SerializeToString,
            ),
            'Step': grpc.unary_unary_rpc_method_handler(
                    servicer.Step,
                    request_deserializer=twinu__core__pb2.StepInfo.FromString,
                    response_serializer=twinu__core__pb2.OK.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'twinu.Twinu', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Twinu(object):
    """all Twinu module need to have this listener
    """

    @staticmethod
    def GetInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/twinu.Twinu/GetInfo',
            twinu__core__pb2.OK.SerializeToString,
            twinu__core__pb2.TwNodeInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/twinu.Twinu/QueryNode',
            twinu__core__pb2.TwNodeQuery.SerializeToString,
            twinu__core__pb2.TwNodeInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Step(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/twinu.Twinu/Step',
            twinu__core__pb2.StepInfo.SerializeToString,
            twinu__core__pb2.OK.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ClockMasterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeClock = channel.stream_stream(
                '/twinu.ClockMaster/SubscribeClock',
                request_serializer=twinu__core__pb2.ClockMessage.SerializeToString,
                response_deserializer=twinu__core__pb2.ClockMessage.FromString,
                )


class ClockMasterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubscribeClock(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClockMasterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeClock': grpc.stream_stream_rpc_method_handler(
                    servicer.SubscribeClock,
                    request_deserializer=twinu__core__pb2.ClockMessage.FromString,
                    response_serializer=twinu__core__pb2.ClockMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'twinu.ClockMaster', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClockMaster(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubscribeClock(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/twinu.ClockMaster/SubscribeClock',
            twinu__core__pb2.ClockMessage.SerializeToString,
            twinu__core__pb2.ClockMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
